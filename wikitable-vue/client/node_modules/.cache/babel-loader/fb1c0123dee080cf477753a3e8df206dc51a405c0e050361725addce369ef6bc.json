{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b9d72850\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"refview\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["/Users/wakouboy/Documents/Projects/paper-ref/client/src/components/RefView.vue"],"sourcesContent":["<template>\n    <div id=\"refview\">\n    </div>\n</template>\n\n<script>\n\nimport { indented_tree_layout } from './js/tree_layout.js'\nexport default {\n    name: 'RefView',\n    components: {\n    },\n    data() {\n        return {\n            id: '#refview'\n        }\n    },\n    computed: {\n        loaddata() {\n            return store.state.loaddata\n        }\n    },\n    watch: {\n        loaddata: function () {\n            this.draw_indented_tree()\n        },\n    },\n    mounted() {\n        this.init()\n        if (store.state.loaddata != null) {\n            this.draw_indented_tree()\n        }\n    },\n\n    methods: {\n        init() {\n            let id = this.id\n            $(id).empty()\n            this.width = $(id).width()\n            this.height = $(id).height()\n            this.svg = d3.select(id).append('svg').attr('width', this.width)\n                .attr('height', this.height)\n\n        },\n\n        draw_indented_tree() {\n            let tree = JSON.parse(JSON.stringify(Data['tree']))\n            console.log('tree', tree)\n            indented_tree_layout(tree)\n\n            let svg = this.svg\n            let width = this.width\n            let height = this.height\n\n            let h = 30 // 一行的高度\n\n            let w = 20 // 缩进距离\n\n            let rows = d3.hierarchy(tree).descendants()\n\n            // console.log(rows)\n            let padding = { 'left': 50, 'right': 10, 'top': 40, 'bottom': 10 }\n\n            let tree_g = svg.append('g').attr('transform', 'translate(' + padding.left + ',' + padding.top + ')')\n\n            let row_g = tree_g.selectAll('g').data(rows)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => {\n                    return 'translate(' + d['depth'] * w + ',' + d['data'].paper_h * h + ')'\n                })\n\n            row_g.append('circle')\n                .attr('r', 5)\n                .attr('cx', 0)\n                .attr('cy', h / 2)\n\n\n            row_g.append('text')\n                .text(d => d['data'].title)\n                .attr('x', w)\n                .attr('y', h / 2)\n                .attr('text-anchor', 'start')\n                .attr(\"alignment-baseline\", \"middle\")\n                .style('font-size', h / 2)\n\n            let paper_group_g = row_g.append('g')\n                .attr('transform', 'translate(' + w * 2 + ',' + h + ')')\n\n            paper_group_g.selectAll('text')\n                .data(d => d['data']['papers'])\n                .enter()\n                .append('text')\n                .text(d => {\n                    return '[' + d.trim() + '] ' + Data['references'][(+d) - 1]\n                })\n                .attr('x', w)\n                .attr('y', (d, i) => {\n                    return i * h + h / 2\n                })\n                .attr('text-anchor', 'start')\n                .attr(\"alignment-baseline\", \"middle\")\n                .style('font-size', h / 3)\n\n\n\n\n        }\n    }\n}\n</script>\n<style scoped>\n#refview {\n    position: absolute;\n    top: 0;\n    width: 50%;\n    left: 50%;\n    height: 100%;\n}\n</style>"],"mappings":";;;EACSA,EAAE,EAAC;AAAS;;uBAAjBC,mBAAA,CACM,OADNC,UACM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}